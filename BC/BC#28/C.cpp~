#include <iostream>
#include <iomanip>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <utility>
#include <bitset>
#include <functional>
#include <algorithm>
#include <fstream>

using namespace std;

#define pii pair<long long,int>
#define piii pair<pii,long long>

long long INF = 1000000000 + 10;
const int maxn = 1e5 + 5;
const int maxm = 2e5 + 5;

int u[maxm] , v[maxm];
long long w[maxn];
int first[maxn] , nxt[maxm];
long long dist[maxm];
bool vis[maxn];
int n,m;
long long k;

void bfs(){
    priority_queue<piii , vector<piii> , greater<piii> > pq;
    memset(vis,0,sizeof(vis));
    for(int i = 1; i <= n; i++) dist[i] = INF;
    dist[1] = 0;
    pq.push(make_pair( make_pair(dist[1],1) , -1) );
    while(!pq.empty()) {
        piii u = pq.top(); pq.pop();
        if(vis[u.first.second]) continue;
        vis[u.first.second] = 1;
        for(int e = first[u.first.second]; e != -1; e = nxt[e])
        {
            if(vis[v[e]]) continue;
            if(dist[v[e]] > dist[u.first.second] + w[e] && ( w[e] >= k + u.second || u.second == -1))
            {
                dist[v[e]] =dist[u.first.second] + w[e];
                if(!vis[v[e]]) {
                    pq.push(make_pair(make_pair(dist[v[e]],v[e]) , w[e]) );
                }
            }
        }
    }
    return;
}

int main(){
	int T; scanf("%d",&T);
	for(int kase = 0; kase < T; kase++){
        memset(first,-1,sizeof(first));
        scanf("%d%d%lld",&n,&m,&k);
        for(int i = 1; i <= m; i++) {
            int a, b; long long ew;  scanf("%d%d%lld",&a,&b,&ew);
            u[i] = a; v[i] = b; w[i] = ew;
            nxt[i] = first[a]; first[a] = i;
        }
        bfs();
        if(dist[n] >= INF || dist[n] < 0) printf("-1\n");
        else printf("%lld\n",dist[n]);
	}
    return 0;
}
